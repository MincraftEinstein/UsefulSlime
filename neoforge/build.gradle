plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.81'
    id 'java-library'
}

base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}"
}

runs {
    configureEach {
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")

    implementation("fuzs.forgeconfigapiport:forgeconfigapiport-neoforge:${config_port_version}")
    implementation("mysticdrew:common-networking-neoforge:${networking_version}-${minecraft_version}")
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
    inputs.property("version", version)

    filesMatching("META-INF/mods.toml") {
        expand("version": version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
